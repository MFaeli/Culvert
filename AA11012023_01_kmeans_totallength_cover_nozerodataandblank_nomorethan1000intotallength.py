# -*- coding: utf-8 -*-
"""AA11012023_01_KMEANS_TotalLength_Cover_NoZeroDataAndBlank_NoMoreThan1000InTotalLength.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZMJ2fvnmo556Ba9VHC0Zik18ruTQdZga

**K-Means Clustering**

**Importing the libraries**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""**Importing the dataset**"""

# Load the CSV file
df = pd.read_csv('GIS_Column_Edited_UTF_8.csv')

# Apply the filters
filtered_df = df[
    (df.iloc[:, 11] == 'Round') &
    (df.iloc[:, 19] != 0) & (df.iloc[:, 19] != '') &
    (df.iloc[:, 19] <= 1000) &
    (df.iloc[:, 20] != 0) & (df.iloc[:, 20] != '') &
    (df.iloc[:, 20] <= 50) &
    (df.iloc[:, 41] != '') &
    (df.iloc[:, 43] != '') &
    (df.iloc[:, 13] != 0) & (df.iloc[:, 13] != '') &
    (df.iloc[:, 13] <= 130)
]




num_rows = filtered_df.shape[0]
print("Number of rows in the filtered DataFrame:", num_rows)




X = filtered_df.iloc[:, [19, 20]].values

print(X)

"""**Using the elbow method to find the optimal number of clusters**"""

from sklearn.cluster import KMeans
wcss = []
for i in range(1, 20):
  kmeans = KMeans(n_clusters = i, init = "k-means++", n_init=10, random_state = 42)
  kmeans.fit(X)
  wcss.append(kmeans.inertia_)

plt.plot(range(1, 20), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""**Training K-Means Model on the dataset**"""

kmeans = KMeans(n_clusters = 5, init = "k-means++", n_init=10, random_state = 42)
y_kmeans = kmeans.fit_predict(X)

print(y_kmeans)

"""**Visualizing the Clusters**"""

plt.scatter(X[y_kmeans== 0, 0], X[y_kmeans== 0, 1], s = 1, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans== 1, 0], X[y_kmeans== 1, 1], s = 1, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans== 2, 0], X[y_kmeans== 2, 1], s = 1, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_kmeans== 3, 0], X[y_kmeans== 3, 1], s = 1, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_kmeans== 4, 0], X[y_kmeans== 4, 1], s = 1, c = 'magenta', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 100, c = "yellow", label = 'Centroids')
plt.title('Clusters of Round Concrete Culverts in MN with Joint Separation')
plt.xlabel('Total Length (Ft)')
plt.ylabel('Cover (Ft)')
plt.legend()
plt.show()

# Given clustering
kmeans = KMeans(n_clusters=5, init="k-means++", n_init=10, random_state=42)
y_kmeans = kmeans.fit_predict(X)

# Define a color map for clusters
color_map = {
    0: 'red',
    1: 'blue',
    2: 'green',
    3: 'cyan',
    4: 'magenta'
}

# Define a label map for clusters
label_map = {
    0: 'Cluster 1',
    1: 'Cluster 2',
    2: 'Cluster 3',
    3: 'Cluster 4',
    4: 'Cluster 5'
}

# Displaying the coordinates of each centroid
for i, (x, y) in enumerate(kmeans.cluster_centers_):
    print(f"{label_map[i]} (Color: {color_map[i]}): X: {x:.2f}, Y: {y:.2f}")

from sklearn.cluster import KMeans
from collections import Counter

# Given clustering
kmeans = KMeans(n_clusters=5, init="k-means++", n_init=10, random_state=42)
y_kmeans = kmeans.fit_predict(X)

# Define a color map for clusters
color_map = {
    0: 'red',
    1: 'blue',
    2: 'green',
    3: 'cyan',
    4: 'magenta'
}

# Count data points in each cluster
cluster_counts = Counter(y_kmeans)

# Displaying the count and color for each cluster
for cluster, count in cluster_counts.items():
    print(f"{cluster}: {count} data points (Color: {color_map[cluster]})")



"""plot the cases just in blue cluster

"""

import matplotlib.pyplot as plt

# Scatter plot for Cluster 1 (blue cluster) data points
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 1, c = 'blue', label = 'Cluster (Blue)')

# Scatter plot for the centroid of Cluster 1 (blue cluster)
plt.scatter(kmeans.cluster_centers_[1, 0], kmeans.cluster_centers_[1, 1], s = 100, c = "yellow", marker="X", label = 'Centroid of Blue Cluster')

plt.title('Data points and Centroid in Blue Cluster')
plt.xlabel('Total Length (Ft)')
plt.ylabel('Cover (Ft)')
plt.legend()
plt.show()

# Count the number of cases in Cluster 1 (blue cluster)
blue_cluster_count = (y_kmeans == 1).sum()

print(f"There are {blue_cluster_count} cases in the blue cluster.")

"""**plot the cases just in magenta cluster and its centroid**"""

import matplotlib.pyplot as plt

# Plotting the data points in the magenta cluster
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 1, c = 'magenta', label = 'Cluster (Magenta)')

# Plotting the centroid of the magenta cluster
plt.scatter(kmeans.cluster_centers_[4, 0], kmeans.cluster_centers_[4, 1], s = 100, c = "yellow", marker='X', label = 'Centroid of Magenta Cluster')

plt.title('Cases in Magenta Cluster and its Centroid')
plt.xlabel('Total Length (Ft)')
plt.ylabel('Cover (Ft)')
plt.legend()
plt.show()

# Counting the number of cases in the magenta cluster
magenta_cluster_count = sum(y_kmeans == 4)

print(f"There are {magenta_cluster_count} cases in the magenta cluster.")

"""**Max and Min**"""

from collections import Counter

# Existing code...

# Count occurrences of each unique value in Cover and Total Length columns
cover_counts = Counter(X[:, 1])
total_length_counts = Counter(X[:, 0])

# Find top 10 most common Cover values
most_common_covers = cover_counts.most_common(10)
least_common_covers = cover_counts.most_common()[:-11:-1]

# Find top 10 most common Total Length values
most_common_total_lengths = total_length_counts.most_common(10)
least_common_total_lengths = total_length_counts.most_common()[:-11:-1]

# Print the results for Cover
print("Top 10 'Cover' values with most data cases:")
for cover, count in most_common_covers:
    print(f"'Cover': {cover} (Ft) with {count} cases.")
print("\nTop 10 'Cover' values with least data cases:")
for cover, count in least_common_covers:
    print(f"'Cover': {cover} (Ft) with {count} cases.")

# Print the results for Total Length
print("\nTop 10 'Total Length' values with most data cases:")
for length, count in most_common_total_lengths:
    print(f"'Total Length': {length} (Ft) with {count} cases.")
print("\nTop 10 'Total Length' values with least data cases:")
for length, count in least_common_total_lengths:
    print(f"'Total Length': {length} (Ft) with {count} cases.")

# Continue with your existing code...
